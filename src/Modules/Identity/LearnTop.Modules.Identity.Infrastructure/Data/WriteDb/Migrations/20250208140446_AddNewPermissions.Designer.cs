// <auto-generated />
using System;
using LearnTop.Modules.Identity.Infrastructure.Data.WriteDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearnTop.Modules.Identity.Infrastructure.Data.WriteDb.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20250208140446_AddNewPermissions")]
    partial class AddNewPermissions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LearnTop.Modules.Identity.Domain.Roles.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c370d992-a181-4d86-a8c3-3c516102880a"),
                            Application = "Articles",
                            Description = "خواندن مقالات",
                            Type = "Read-Deleted"
                        },
                        new
                        {
                            Id = new Guid("0aae8209-417a-4aa9-87ea-1eae29f17a1c"),
                            Application = "Articles",
                            Description = "ایجاد مقالات",
                            Type = "Write"
                        },
                        new
                        {
                            Id = new Guid("d93d26f9-7c2f-4f98-bae1-c27a0f2ecfda"),
                            Application = "Tags",
                            Description = "ایجاد تگ های جدید",
                            Type = "Write"
                        },
                        new
                        {
                            Id = new Guid("eb10266b-07cd-41ff-b7f1-f4afc1f5c538"),
                            Application = "Tags",
                            Description = "حذف تگ ها",
                            Type = "Delete"
                        });
                });

            modelBuilder.Entity("LearnTop.Modules.Identity.Domain.Roles.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80649c43-91b5-406e-8059-3eefadff94b5"),
                            CreatedAt = new DateTime(2025, 2, 8, 17, 34, 45, 739, DateTimeKind.Local).AddTicks(4358),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "User",
                            UpdatedAt = new DateTime(2025, 2, 8, 17, 34, 45, 739, DateTimeKind.Local).AddTicks(4359)
                        },
                        new
                        {
                            Id = new Guid("11c6e82a-5a4b-48ed-a3da-c62f50e85812"),
                            CreatedAt = new DateTime(2025, 2, 8, 17, 34, 45, 738, DateTimeKind.Local).AddTicks(6778),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 2, 8, 17, 34, 45, 739, DateTimeKind.Local).AddTicks(4319)
                        });
                });

            modelBuilder.Entity("LearnTop.Modules.Identity.Domain.Users.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Address");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Email", "Identity");
                });

            modelBuilder.Entity("LearnTop.Modules.Identity.Domain.Users.Models.Mobile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Number");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Mobile", "Identity");
                });

            modelBuilder.Entity("LearnTop.Modules.Identity.Domain.Users.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionsId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionRole", "Identity");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser", "Identity");
                });

            modelBuilder.Entity("LearnTop.Modules.Identity.Domain.Users.Models.Email", b =>
                {
                    b.HasOne("LearnTop.Modules.Identity.Domain.Users.Models.User", null)
                        .WithOne("Email")
                        .HasForeignKey("LearnTop.Modules.Identity.Domain.Users.Models.Email", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LearnTop.Modules.Identity.Domain.Users.ValueObjects.Verify", "Verify", b1 =>
                        {
                            b1.Property<Guid>("EmailId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Code")
                                .HasColumnType("int")
                                .HasColumnName("Code");

                            b1.Property<DateTime>("ExpireIn")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpireIn");

                            b1.Property<bool>("Status")
                                .HasColumnType("bit")
                                .HasColumnName("Status");

                            b1.HasKey("EmailId");

                            b1.ToTable("Email", "Identity");

                            b1.WithOwner()
                                .HasForeignKey("EmailId");
                        });

                    b.Navigation("Verify")
                        .IsRequired();
                });

            modelBuilder.Entity("LearnTop.Modules.Identity.Domain.Users.Models.Mobile", b =>
                {
                    b.HasOne("LearnTop.Modules.Identity.Domain.Users.Models.User", null)
                        .WithOne("Mobile")
                        .HasForeignKey("LearnTop.Modules.Identity.Domain.Users.Models.Mobile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LearnTop.Modules.Identity.Domain.Users.ValueObjects.Verify", "Verify", b1 =>
                        {
                            b1.Property<Guid>("MobileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Code")
                                .HasColumnType("int")
                                .HasColumnName("Code");

                            b1.Property<DateTime>("ExpireIn")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpireIn");

                            b1.Property<bool>("Status")
                                .HasColumnType("bit")
                                .HasColumnName("Status");

                            b1.HasKey("MobileId");

                            b1.ToTable("Mobile", "Identity");

                            b1.WithOwner()
                                .HasForeignKey("MobileId");
                        });

                    b.Navigation("Verify")
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("LearnTop.Modules.Identity.Domain.Roles.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnTop.Modules.Identity.Domain.Roles.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("LearnTop.Modules.Identity.Domain.Roles.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnTop.Modules.Identity.Domain.Users.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearnTop.Modules.Identity.Domain.Users.Models.User", b =>
                {
                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Mobile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
